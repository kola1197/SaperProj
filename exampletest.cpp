#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "board.h"
#include "mainwindow.h"
#include "cage.h"
#include "iostream"
using namespace ::testing;
// Simple test, does not use gmock
TEST(Dummy, foobar)
{
    EXPECT_EQ(1, 1);
}

bool AreVectorsEq(vector<vector<QString>> vec_1, vector<vector<QString>> vec_2)
{
    for (int i = 0; i < vec_1.size(); i++) {
        for (int j = 0; j < vec_1[i].size(); j++) {
            if(vec_1[i][j] != vec_2[i][j])
                return false;
        }
    }
    return true;
}

TEST(SaperTest, TestGame)
{
    MainWindow w;
    Board board;
    vector<pair<int,int>> mines = {
        {0,0},{0,3},{0,9},
        {1,5},{1,11},{1,14},
        {2,1},{2,7},{2,12},
        {3,15},
        {4,2},{4,4},{4,6},{4,10},
        {5,13},
        {6,0},{6,3},{6,11},{6,15},
        {7,6},{7,8},{7,10},
        {8,2},{8,4},{8,13},
        {10,6},{10,11},{10,15},
        {11,0},{11,4},
        {12,2},{12,13},
        {13,3},{13,7},{13,15},
        {14,10},
        {15,0},{15,3},{15,7},{15,13}};

    //EXPECT_TRUE(board.generateField(mines));

    vector<vector<QString>> testBoard = w.mainBoard.generateField(mines);
    vector<vector<QString>> expectedBoard = {
         {"#","1","1","#","2","1","1","0","1","#","2","1","1","1","1","1"},
         {"2","2","2","1","2","#","2","1","2","1","2","#","2","2","#","1"},
         {"1","#","1","0","1","1","2","#","1","0","1","2","#","2","2","2"},
         {"1","2","2","2","1","2","2","2","1","1","1","2","1","1","1","#"},
         {"0","1","#","2","#","2","#","1","0","1","#","1","1","1","2","1"},
         {"1","2","2","3","2","2","1","1","0","1","2","2","2","#","2","1"},
         {"#","1","1","#","1","1","1","2","1","2","2","#","2","1","2","#"},
         {"1","2","2","3","2","2","#","2","#","2","#","2","2","1","2","1"},
         {"0","1","#","2","#","2","1","2","1","2","1","1","1","#","1","0"},
         {"0","1","1","2","1","2","1","1","0","0","1","1","2","1","2","1"},
         {"1","1","0","1","1","2","#","1","0","0","1","#","1","0","1","#"},
         {"#","2","1","2","#","2","1","1","0","0","1","1","2","1","2","1"},
         {"1","2","#","3","2","1","1","1","1","0","0","0","1","#","2","1"},
         {"0","1","2","#","1","0","1","#","1","1","1","1","1","1","2","#"},
         {"1","1","2","2","2","0","2","2","2","1","#","1","1","1","2","1"},
         {"#","1","1","#","1","0","1","#","1","1","1","1","1","#","1","0"}};

    //EXPECT_TRUE(AreVectorsEq(testBoard,expectedBoard));

    //EXPECT_THAT(num1, ElementsAreArray(num2));
    for (int i = 0; i < 16; i++) {
        EXPECT_THAT(testBoard[i],ElementsAreArray(expectedBoard[i]));
    }

    //EXPECT_TRUE(board.openCage(0,15));
}
